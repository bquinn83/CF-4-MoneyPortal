@using MoneyPortal.ViewModels
@model HouseholdVM
@{
    ViewBag.Title = Model.HouseholdName;
}

<!--SHORTCUT BUTTONS-->
<div class="row shortcut-bar">
    @if (User.IsInRole("Owner"))
    {
        <div class="col-auto">
            <div class="shortcut btn" id="shc-invite-member"><strong>Invite Members</strong> <i class="fas fa-user-plus"></i></div>
        </div>
        if (Model.UsersBankAccounts != null)
        {
            <div class="col-auto">
                <div class="shortcut btn" id="shc-join-bank-account"><strong>Join Bank Account</strong> <i class="fas fa-university"></i></div>
            </div>
        }
        <div class="col-auto">
            <div class="shortcut btn" id="shc-create-budgets"><strong>Create Budgets</strong> <i class="fas fa-sitemap"></i></div>
        </div>
        <div class="col-auto">
            <div class="shortcut btn" id="shc-edit-budgets"><strong>Edit Budgets</strong> <i class="fas fa-edit"></i></div>
        </div>
        <div class="col-auto ml-auto">
            <div class="shortcut btn leave-household" id="shc-delete-household"><strong>Delete Household</strong> <i class="fas fa-house-damage"></i></div>
        </div>
    }
    @if (User.IsInRole("Member"))
    {
        if (Model.UsersBankAccounts != null)
        {
            <div class="col-auto">
                <div class="shortcut btn" id="shc-join-bank-account"><strong>Join Bank Account</strong> <i class="fas fa-university"></i></div>
            </div>
        }
        <div class="col-auto ml-auto">
            <div class="shortcut btn leave-household" id="shc-leave-household"><strong>Leave Household</strong> <i class="fas fa-door-closed"></i></div>
        </div>
    }
</div>

<!--SHORTCUT BOXES-->
<div class="row" id="shortcut-row">
    <!--INVITE MEMBER-->
    <div class="col-6 shortcut-block" id="invite-member">
        <div class="block">
            <div class="title row no-gutters mb-0">
                <strong>Invite Member</strong>
                <div class="col-auto ml-auto"><i class="fas fa-lg fa-chevron-up btn btn-block-minimize" id="collapse-bank-account"></i></div>
                <div class="col-auto"><i class="fas fa-lg fa-times btn btn-block-close"></i></div>
            </div>
            <div class="block-body collapsable">
                @using (Html.BeginForm("Invite", "Invitations", FormMethod.Post, new { id = "form-invite-member" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-group row">
                        @Html.Label("Recipient Emails", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.TextArea("RecipientEmails", htmlAttributes: new { @class = "form-control", placeholder = "Enter comma seperated emails.", rows = "2" })
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.Label("Personal Message", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.TextArea("PersonalMessage", htmlAttributes: new { @class = "form-control", rows = "4" })
                        </div>
                    </div>
                    <div class="form-group row no-gutters mb-0">
                        <div class="col-auto ml-auto">
                            <button type="submit" class="btn btn-primary">Invite!</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <!--JOIN BANK ACCOUNT-->
    <div class="col-6 shortcut-block" id="join-bank-account">
        <div class="block">
            <div class="title row no-gutters mb-0">
                <strong>Join Bank Account</strong>
                <div class="col-auto ml-auto"><i class="fas fa-lg fa-chevron-up btn btn-block-minimize" id="collapse-bank-account"></i></div>
                <div class="col-auto"><i class="fas fa-lg fa-times btn btn-block-close"></i></div>
            </div>
            <div class="block-body collapsable">
                @using (Html.BeginForm("JoinBankAccount", "Households", FormMethod.Post, new { id = "form-join-bank-account" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(Model => Model.HouseholdId)
                    <div class="form-group row">
                        @Html.Label("Bank Accounts", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownList("UsersBankAccounts", null, new { @class = "form-control", id = "dd-user-bank-accounts" })
                        </div>
                    </div>
                    <div class="form-group row no-gutters mb-0">
                        <div class="col-auto ml-auto">
                            <button type="submit" class="btn btn-primary">Join</button>
                        </div>
                    </div>
                }
            </div>
        </div>

    </div>
    <!--CREATE BUDGETS & ITEMS / REMOVE ITEMS-->
    <div class="col-6 shortcut-block" id="create-budgets">
        <div class="block">
            <div class="title row no-gutters mb-0">
                <strong>Create Budgets</strong>
                <div class="col-auto ml-auto"><i class="fas fa-lg fa-chevron-up btn btn-block-minimize" id="collapse-bank-account"></i></div>
                <div class="col-auto"><i class="fas fa-lg fa-times btn btn-block-close"></i></div>
            </div>
            <div class="block-body collapsable">
                <div class="row">
                    <div class="col-md-7">
                        @using (Html.BeginForm("CreateBudget", "Budgets", FormMethod.Post, new { id = "form-add-budget" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(Model => Model.HouseholdId)
                            <div class="form-group row">
                                @Html.Label("Name", new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    <input type="text" class="form-control" name="budgetName" required />

                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.Label("Description", new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    <input type="text" class="form-control" name="budgetDescription" required />
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.Label("Budget Amount", htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9 input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text form-control">$</span>
                                    </div>
                                    <input type="number" class="form-control" name="budgetAmount" required />
                                    <div class="input-group-append">
                                        <span class="input-group-text form-control">.00</span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row no-gutters mb-0">
                                <div class="col-auto ml-auto">
                                    <button type="submit" class="btn btn-primary" data-dismiss="modal">Create Budget</button>
                                </div>
                            </div>
                        }
                        <br />
                        <div class="title"><strong>Create Items</strong></div>
                        @using (Html.BeginForm("CreateBudgetItem", "Budgets", FormMethod.Post, new { id = "form-add-budget-item" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-group row">
                                @Html.Label("Budget", new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.DropDownList("Budgets", null, new { @class = "form-control", id = "dd-budgets" })
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.Label("Name", new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    <input type="text" class="form-control" name="budgetItemName" required />
                                </div>
                            </div>
                            <div class="form-group row no-gutters mb-0">
                                <div class="col-auto ml-auto">
                                    <button type="submit" class="btn btn-primary">Create Item</button>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-md-5">
                        @using (Html.BeginForm("RemoveItem", "Budgets", FormMethod.Post, new { id = "form-remove-budget-item" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-group mb-0" id="div-budget-list">
                                @if (User.IsInRole("Owner"))
                                {
                                    @Html.Action("BudgetList", "Budgets")
                                }
                            </div>
                            <div class="form-group row no-gutters mb-0">
                                <div class="col-auto ml-auto">
                                    <button type="submit" class="btn btn-danger">Remove Item</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>
    </div>
    <!--EDIT BUDGET-->
    <div class="col-6 shortcut-block" id="edit-budgets">
        <div class="block">
            <div class="title row no-gutters mb-0">
                <strong>Edit Budget</strong>
                <div class="col-auto ml-auto"><i class="fas fa-lg fa-chevron-up btn btn-block-minimize" id="collapse-bank-account"></i></div>
                <div class="col-auto"><i class="fas fa-lg fa-times btn btn-block-close"></i></div>
            </div>
            <div class="block-body collapsable">
            </div>
        </div>
    </div>
</div>

<!--ACCOUNT DETAILS-->
<div id="household-statistics">
    @Html.Partial("_HouseholdStatistics", new HouseholdStatisticsVM(Model.HouseholdId))
</div>

<!-- ADD CHARTING & BUDGETS HERE -->
<div class="row">
    <div class="col-md-8">
        <div class="block">
            <div class="title row no-gutters mb-0">
                <div class="col-10"><strong class="d-block">Budgets</strong></div>
                <div class="ml-auto"><i class="fas fa-lg fa-chevron-up btn btn-block-minimize" id="collapse-ticket-priorities"></i></div>
            </div>
            <div class="block-body collapsable">
                <canvas id="budgets-bar-chart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="block">
            <div class="title row no-gutters mb-0">
                <div class="col-10"><strong class="d-block">Budget Breakdown</strong></div>
                <div class="ml-auto"><i class="fas fa-lg fa-chevron-up btn btn-block-minimize" id="collapse-ticket-priorities"></i></div>
            </div>
            <div class="block-body collapsable">
                @Html.DropDownList("Budgets", null, new { @class = "form-control", id = "budget-select" })
                <canvas id="budgets-breakdown-chart"></canvas>
            </div>
        </div>
    </div>
</div>

<!--SCRIPTS & FUNCTIONALITY-->
@section Scripts{
    <script>
        //ACTIVE MENU BUTTON
        $('#dd-household-link').click()
        $('#household-dashboard').addClass('active')

        //SHORTCUT BUTTONS
        $('.shortcut-block').hide()
        $('#shc-invite-member').on("click", () => {
            $('#shortcut-row').prepend($('#invite-member'))
            $('#invite-member').slideDown()
        })
        $('#shc-join-bank-account').on("click", () => {
            $('#shortcut-row').prepend($('#join-bank-account'))
            $('#join-bank-account').slideDown()
        })
        $('#shc-create-budgets').on("click", () => {
            $('#shortcut-row').prepend($('#create-budgets'))
            $('#create-budgets').slideDown()
        })
        $('#shc-edit-budgets').on("click", () => {
            $('#shortcut-row').prepend($('#edit-budgets'))
            $('#edit-budgets').slideDown()
        })

        //LEAVE/DELETE HOUSEHOLD SHORTCUT BUTTON
        $('#shc-leave-household').on("click", () => {
            Swal.fire({
                title: 'Are you sure?',
                text: "You will need a new invitation code to rejoin this household!",
                icon: 'warning',
                input: 'text',
                inputPlaceholder: 'Enter LEAVE if you wish to proceed.',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, leave',
                backdrop: true
            }).then((result) => {
                if (result.value == 'LEAVE') {
                    window.location.href = '@Url.Action("Leave", "Households")';
                } else if (result.dismiss != Swal.DismissReason.cancel || result.dismiss != Swal.DismissReason.backdrop) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'LEAVE not confirmed!',
                        icon: 'error',
                        confirmButtonText: 'Ok'
                    })
                }
            })
        })
        $('#shc-delete-household').on("click", () => {
            Swal.fire({
                title: 'Are you sure?',
                text: "Deleting your household will remove all Budgets & Members!",
                icon: 'warning',
                input: 'text',
                inputPlaceholder: 'Enter DELETE if you wish to proceed.',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Delete',
                backdrop: true
            }).then((result) => {
                if (result.value == 'DELETE') {
                    window.location.href = '@Url.Action("Delete", "Households")';
                } else if (result.dismiss != Swal.DismissReason.cancel || result.dismiss != Swal.DismissReason.backdrop) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'DELETE not confirmed!',
                        icon: 'error',
                        confirmButtonText: 'Ok'
                    })
                }
            })
        })

        //AJAX CLICKS
        $('#form-invite-member').on("submit", function (e) {
            e.preventDefault();
            var actionUrl = $(this).attr("action");
            $.post(actionUrl, $(this).serialize(), function (result) {
                if (result > 0) {
                    toastr["success"](`You have sent ${result} invitations!`, "Invitations Sent!")
                    $('#form-invite-member')[0].reset();
                } else {
                    toastr["error"]("There were no valid emails", "Invite Error!")
                }
            }).fail(function () {
                toastr["error"]("There was an error submitting your invites.", "Submit Error!")
            })        })
        $('#form-join-bank-account').on("submit", function (e) {
            e.preventDefault();
            var actionUrl = $(this).attr("action");
            $.post(actionUrl, $(this).serialize(), function (result) {
                if (result) {
                    $("#dd-user-bank-accounts").empty()
                    $.each(JSON.parse(result), function (value, key) {
                        $("#dd-user-bank-accounts").append($("<option></option>").attr("value", value).text(key))
                    })
                    $('#form-join-bank-account')[0].reset()
                    toastr["success"](`You have joined an account with the Household!`, "Bank Account Joined!")
                } else {
                    toastr["error"]("The bank account was not joined to the Household", "Join Error!")
                }
            }).fail(function () {
                toastr["error"]("There was an error submitting your request.", "Submit Error!")
            })
        })
        $('#form-add-budget').on("submit", function (e) {
            e.preventDefault();
            var actionUrl = $(this).attr("action");
            $.post(actionUrl, $(this).serialize(), function (result) {
                if (result) {
                    $('#form-add-budget')[0].reset()
                    $("#dd-budgets").empty()
                    $.each(JSON.parse(result), function (value, key) {
                        $("#dd-budgets").append($("<option></option>").attr("value", value).text(key))
                    })
                    $('#div-budget-list').load('@Url.Action("BudgetList", "Budgets")')
                    toastr["success"]("Your budget has been added!", "New Budget!")
                } else if (result == false){
                    toastr["error"]("There was an error creating your budget.", "Error!")
                }
            }).fail(function () {
                toastr["error"]("There was an error submitting your budget.", "Submit Error!")
            })
        })
        $('#form-add-budget-item').on("submit", function (e) {
            e.preventDefault();
            var actionUrl = $(this).attr("action");
            $.post(actionUrl, $(this).serialize(), function (result) {
                if (result == true) {
                    $('#form-add-budget-item')[0].reset();
                    $('#div-budget-list').load('@Url.Action("BudgetList", "Budgets")')
                    toastr["success"]("Your budget item has been added!", "New Budget Item!")
                } else {
                    toastr["error"]("There was an error creating your budget item.", "Error!")
                }
            }).fail(function () {
                toastr["error"]("There was an error submitting your budget item.", "Submit Error!")
            })
        })
        $('#form-remove-budget-item').on("submit", function (e) {
            e.preventDefault();
            var actionUrl = $(this).attr("action");
            $.post(actionUrl, $(this).serialize(), function (result) {
                if (result > 0) {
                    $('#div-budget-list').load('@Url.Action("BudgetList", "Budgets")')
                    toastr["warning"](`You have removed ${result} item(s)!`, "Removed Budget Item.")
                } else {
                    toastr["error"]("There was an error removing your budget item.", "Removal Error!")
                }
            }).fail(function () {
                toastr["error"]("There was an error submitting your budget item removal.", "Submit Error!")
            })
        })

        //CHARTING
        var budgets = $('#budgets-bar-chart');
        var breakdown = $('#budgets-breakdown-chart');

        $('#budget-select').change(function (e) {
            //alert($(e.currentTarget).val())
            @*$.ajax({
                type: "POST",
                url: "@Url.Action("UpdateBudgetItem", "Budgets")",
                data: {
                    transactionId: $(e.currentTarget).attr("id"),
                    budgetItemId: $(e.currentTarget).val()
                },
                dataType: "json",
                success: function (result) {
                    if (result == true) {
                        toastr["success"]("The transactions budget has been updated!.", "Success!")
                    } else if (result == "reset") {
                        toastr["warning"]("The transactions budget has been removed.", "Budget Removed!")
                         $(e.currentTarget).val('')
                    } else {
                        toastr["error"]("There was an error updating your budget.", "Update Error!")
                    }
                },
                error: function (result) {
                    toastr["error"]("There was an error, please refresh.", "Submission Error!")
                }
            });*@
        });

        var budgetsChart = new Chart(budgets, {
            type: 'horizontalBar',
            data: {
                labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                datasets: [{
                    label: '# of Votes',
                    data: [12, 19, 3, 5, 2, 3],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
        var breakdownChart = new Chart(breakdown, {
            type: 'doughnut',
            data: {
                labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                datasets: [{
                    label: '# of Votes',
                    data: [12, 19, 3, 5, 2, 3],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    </script>
}